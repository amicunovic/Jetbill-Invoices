import os
import PyPDF2
from tkinter import *
from tkinter import filedialog
import tkinter as tk
import tkinter.font as font
from Radi11 import * 
from Radi11 import cost_m
from Radi11 import product_m
from Radi11 import account_no
from Radi11 import account_master
from Radi11 import date_master
from Radi11 import product_group
from Radi11 import invoice_number
import csv
import os
from PIL import Image, ImageTk

def resource_path(relative_path):
    # It is important to add path to spec scrip that is generated by pyisntaller
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS,
        # and places our data files in a folder relative to that temp
        # folder named as specified in the datas tuple in the spec file
        base_path = os.path.join(sys._MEIPASS, 'data')
    except Exception:
        # sys._MEIPASS is not defined, so use the original path
        base_path = "C:\\Users\\AMicunovic\\Desktop\\Jetbill Program"

    return os.path.join(base_path, relative_path)

class InvoiceReader:

    def __init__ (self, master):
        self.button1 = Button(master, text='Choose files', command=self.choose_file, height = 2, width = 13, font=helv20)
        self.button1.grid(row=6, column=4)
        self.button2 = Button(master, text='Start the program', command=self.read_pdf, height = 2, width = 13, font=helv20)
        self.button2.grid(row=8, column=4)
        self.button3 = Button(master, text='Save the csv file', command=self.create_excel, height = 2, width = 13, font=helv20)
        self.button3.grid(row=10, column=4)


    def choose_file(self):  # bira fajlove koji ce uci u program

        filez = filedialog.askopenfilenames(parent=root,title='Choose a file', filetypes=(("pdf files","*.pdf"),("all files","*.*")))
        global allfiles
        allfiles = list(filez)

        status = Label(root, text=f"Number of files: {len(allfiles)}",bg='#DDEBF7',fg="white", bd=1, anchor=W, font=helv16) # add a label (where, what text to write, border, relief, location of the text in the bar)
        status.grid(row=16, rowspan=2, column=4)

    def read_pdf(self):  # pusta funkciju radi10 iz skripte radi11
        global last_invoice
        last_invoice = len(allfiles) - 1 # podesavam duzinu liste
        br = 0 # podesavam pocetak while loopa

        while br <= last_invoice:  # da while loop radi sve dok ne obradi poslednji PDF
            radi10(allfiles[br])
            br+=1

    def create_excel(self): # pravi csv, koristeci asksaveasfilename iz filedialoga

        #file_name = self.entry.get() Input message from an entry, not used in this one
        formats = [('Comma Separated values', '*.csv'), ]
        file_name = filedialog.asksaveasfilename(parent=root, filetypes=formats, title="Save as...")
        rows = zip(account_master, account_no, product_m, date_master, cost_m, product_group, invoice_number) # What will be imported in excel as a column

        with open(file_name, "w", newline = '') as f:
            writer = csv.writer(f)
            for row in rows:
                writer.writerow(row)


root = tk.Tk()
root.title('Jetbill Invoice Reader')
root.geometry("738x386")
root.configure(background='white')

helv20 = font.Font(family='Helvetica', size=12)
helv16 = font.Font(family='Helvetica', size=12, weight='bold')

filename = PhotoImage(file=resource_path('BGI.png'))
#photo_image = ImageTk.PhotoImage(image)
label = tk.Label(root, image = filename)
label.grid(row=0, rowspan=20, column=0, columnspan=9)


#for i in range(20):  # popunjava prazne redove i kolone da bi se pokazalo podesavanje grida dugmica u aplikaciji
    #Frame(root, width=20, height=20, background='white').grid(row=0, column=i) 

#for j in range(20):
    #Frame(root, width=20, height=20, background='white').grid(column=0, row=j)

b = InvoiceReader(root)

root.mainloop()




